import { GifsResult } from '@giphy/js-fetch-api';
import { IGif, IUser } from '@giphy/js-types';
import { GetDerivedStateFromProps, PureComponent, ReactType } from 'react';
import { EventProps, GifOverlayProps } from './gif';
declare type Props = {
    className?: string;
    width: number;
    user: Partial<IUser>;
    columns: number;
    gutter: number;
    fetchGifs: (offset: number) => Promise<GifsResult>;
    onGifsFetched?: (gifs: IGif[]) => void;
    onGifsFetchError?: (e: Error) => void;
    overlay?: ReactType<GifOverlayProps>;
    hideAttribution?: boolean;
    noResultsMessage?: string | JSX.Element;
} & EventProps;
declare type State = {
    gifWidth: number;
    isFetching: boolean;
    isError: boolean;
    gifs: IGif[];
    isLoaderVisible: boolean;
    isDoneFetching: boolean;
};
declare class Grid extends PureComponent<Props, State> {
    static className: string;
    static loaderClassName: string;
    static fetchDebounce: number;
    static readonly defaultProps: Readonly<{
        gutter: number;
        user: {};
    }>;
    readonly state: Readonly<{
        isFetching: boolean;
        isError: boolean;
        gifWidth: number;
        gifs: IGif[];
        isLoaderVisible: boolean;
        isDoneFetching: boolean;
    }>;
    bricks?: any;
    el?: HTMLDivElement | null;
    unmounted: boolean;
    paginator: () => Promise<IGif[]>;
    static getDerivedStateFromProps: GetDerivedStateFromProps<Props, State>;
    setBricks(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: Props, prevState: State): void;
    onLoaderVisible: (isVisible: boolean) => void;
    onFetch: import("throttle-debounce").throttle<() => Promise<void>>;
    render(): JSX.Element;
}
export default Grid;
