import { IGif, IRendition, IImages } from '@giphy/js-types';
export declare const getSpecificRendition: ({ images, is_sticker: isSticker }: IGif, renditionLabel: string, isStill?: boolean, useVideo?: boolean) => string;
interface IRenditionWithName extends IRendition {
    renditionName: keyof IImages;
}
export declare const getBestRendition: (images: IImages, gifWidth: number, gifHeight: number, scaleUpMaxPixels?: number | undefined) => IRenditionWithName;
declare type Options = {
    isStill?: boolean;
    useVideo?: boolean;
    scaleUpMaxPixels?: number;
};
export declare const getBestRenditionUrl: ({ images, video, type }: IGif, gifWidth: number, gifHeight: number, options?: Options) => "" | "fixed_height_still" | "original_still" | "fixed_width" | "fixed_height_small_still" | "fixed_height_downsampled" | "preview" | "fixed_height_small" | "downsized_still" | "downsized" | "downsized_large" | "fixed_width_small_still" | "preview_webp" | "fixed_width_still" | "fixed_width_small" | "downsized_small" | "fixed_width_downsampled" | "downsized_medium" | "original" | "fixed_height" | "looping" | "original_mp4" | "preview_gif" | "480w_still";
export declare const getGifHeight: ({ images }: IGif, gifWidth: number) => number;
export declare const getGifWidth: ({ images }: IGif, gifHeight: number) => number;
/**
 * GIF Text - Alt Text: Generates alt text for
 * GIF images based on username and tags.
 * @prop  {Gif}
 * @return {String} GIF alt text.
 */
export declare const getAltText: ({ user, tags, is_sticker, title }: IGif) => string;
export {};
